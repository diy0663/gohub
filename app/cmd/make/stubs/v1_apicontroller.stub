package {{APIVersion}}

// todo 注意, 需要自行保存文件之后自动import 包进来
// todo 控制器这里有个版本控制 类似 v1, v2
// todo 还需要自行去添加对应的路由,以及是否加中间件等

type {{StructNamePlural}}Controller struct {
    BaseAPIController
}

func (ctrl *{{StructNamePlural}}Controller) Index(c *gin.Context) {


    // 分页的参数验证
	request := requests.PaginationRequest{}
	if ok := requests.RequestValidate(c, &request, requests.Pagination); !ok {

		return
	}

	data, pager := {{PackageName}}.Paginate(c, 10)
	response.JSON(c, gin.H{
		"data":  data,
		"pager": pager,
	})

}

func (ctrl *{{StructNamePlural}}Controller) Show(c *gin.Context) {
    {{VariableName}}Model := {{PackageName}}.Get(c.Param("id"))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }
    response.Data(c, {{VariableName}}Model)
}

func (ctrl *{{StructNamePlural}}Controller) Store(c *gin.Context) {
/*
    request := requests.{{StructName}}Request{}
    if ok := requests.RequestValidate(c, &request, requests.{{StructName}}Save); !ok {
        return
    }

    {{VariableName}}Model := {{PackageName}}.{{StructName}}{
        FieldName:      request.FieldName,
    }
    {{VariableName}}Model.Create()
    if {{VariableName}}Model.ID > 0 {
        response.Created(c, {{VariableName}}Model)
    } else {
        response.Abort500(c, "创建失败，请稍后尝试~")
    }
    */
}

func (ctrl *{{StructNamePlural}}Controller) Update(c *gin.Context) {

/*
    // 先校验参数是否通过,之后再去查数据库
    request := requests.{{StructName}}Request{}
    bindOk := requests.RequestValidate(c, &request, requests.{{StructName}}Save)

	if !bindOk {
		return
	}

    {{VariableName}}Model := {{PackageName}}.Get(c.Param("id"))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }

    if ok := policies.CanModify{{StructName}}(c, {{VariableName}}Model); !ok {
        response.Abort403(c)
        return
    }



    {{VariableName}}Model.FieldName = request.FieldName
    rowsAffected := {{VariableName}}Model.Save()
    if rowsAffected > 0 {
        response.Data(c, {{VariableName}}Model)
    } else {
        response.Abort500(c, "更新失败，请稍后尝试~")
    }
    */
}

func (ctrl *{{StructNamePlural}}Controller) Delete(c *gin.Context) {

/*
    {{VariableName}}Model := {{PackageName}}.Get(c.Param("id"))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }

    if ok := policies.CanModify{{StructName}}(c, {{VariableName}}Model); !ok {
        response.Abort403(c)
        return
    }

    rowsAffected := {{VariableName}}Model.Delete()
    if rowsAffected > 0 {
        response.Success(c)
        return
    }

    */
    response.Abort500(c, "删除失败，请稍后尝试~")
}